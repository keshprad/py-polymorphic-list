"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[671],{3905:function(t,e,r){r.d(e,{Zo:function(){return c},kt:function(){return y}});var n=r(7294);function o(t,e,r){return e in t?Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[e]=r,t}function i(t,e){var r=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),r.push.apply(r,n)}return r}function a(t){for(var e=1;e<arguments.length;e++){var r=null!=arguments[e]?arguments[e]:{};e%2?i(Object(r),!0).forEach((function(e){o(t,e,r[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(r,e))}))}return t}function p(t,e){if(null==t)return{};var r,n,o=function(t,e){if(null==t)return{};var r,n,o={},i=Object.keys(t);for(n=0;n<i.length;n++)r=i[n],e.indexOf(r)>=0||(o[r]=t[r]);return o}(t,e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(t);for(n=0;n<i.length;n++)r=i[n],e.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(t,r)&&(o[r]=t[r])}return o}var l=n.createContext({}),s=function(t){var e=n.useContext(l),r=e;return t&&(r="function"==typeof t?t(e):a(a({},e),t)),r},c=function(t){var e=s(t.components);return n.createElement(l.Provider,{value:e},t.children)},m={inlineCode:"code",wrapper:function(t){var e=t.children;return n.createElement(n.Fragment,{},e)}},u=n.forwardRef((function(t,e){var r=t.components,o=t.mdxType,i=t.originalType,l=t.parentName,c=p(t,["components","mdxType","originalType","parentName"]),u=s(r),y=o,d=u["".concat(l,".").concat(y)]||u[y]||m[y]||i;return r?n.createElement(d,a(a({ref:e},c),{},{components:r})):n.createElement(d,a({ref:e},c))}));function y(t,e){var r=arguments,o=e&&e.mdxType;if("string"==typeof t||o){var i=r.length,a=new Array(i);a[0]=u;var p={};for(var l in e)hasOwnProperty.call(e,l)&&(p[l]=e[l]);p.originalType=t,p.mdxType="string"==typeof t?t:o,a[1]=p;for(var s=2;s<i;s++)a[s]=r[s];return n.createElement.apply(null,a)}return n.createElement.apply(null,r)}u.displayName="MDXCreateElement"},9881:function(t,e,r){r.r(e),r.d(e,{frontMatter:function(){return p},contentTitle:function(){return l},metadata:function(){return s},toc:function(){return c},default:function(){return u}});var n=r(7462),o=r(3366),i=(r(7294),r(3905)),a=["components"],p={sidebar_position:1,title:"Intro"},l="py-polymorphic-list",s={unversionedId:"intro",id:"intro",isDocsHomePage:!1,title:"Intro",description:"Publish to PyPIDeploy docs to GitHub Pages",source:"@site/docs/intro.md",sourceDirName:".",slug:"/intro",permalink:"/py-polymorphic-list/docs/intro",editUrl:"https://github.com/keshprad/py-polymorphic-list/edit/main/docs/docs/intro.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1,title:"Intro"},sidebar:"tutorialSidebar",next:{title:"Installation",permalink:"/py-polymorphic-list/docs/getting-started/installation"}},c=[{value:"What is a Polymorphic List?",id:"what-is-a-polymorphic-list",children:[],level:2}],m={toc:c};function u(t){var e=t.components,r=(0,o.Z)(t,a);return(0,i.kt)("wrapper",(0,n.Z)({},m,r,{components:e,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"py-polymorphic-list"},"py-polymorphic-list"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://github.com/keshprad/py-polymorphic-list/actions/workflows/publish.yml"},(0,i.kt)("img",{parentName:"a",src:"https://github.com/keshprad/py_polymorphic_list/actions/workflows/publish.yml/badge.svg",alt:"Publish to PyPI"})),(0,i.kt)("a",{parentName:"p",href:"https://github.com/keshprad/py-polymorphic-list/actions/workflows/docs.yml"},(0,i.kt)("img",{parentName:"a",src:"https://github.com/keshprad/py_polymorphic_list/actions/workflows/docs.yml/badge.svg",alt:"Deploy docs to GitHub Pages"}))),(0,i.kt)("p",null,"Python implementation of a polymorphic list"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://pypi.org/project/py-polymorphic-list/"},"View on PyPI")," / ",(0,i.kt)("a",{parentName:"p",href:"https://keshprad.github.io/py-polymorphic-list/"},"Documentation")," / ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/keshprad/py-polymorphic-list/"},"GitHub Source Code")),(0,i.kt)("h2",{id:"what-is-a-polymorphic-list"},"What is a Polymorphic List?"),(0,i.kt)("p",null,"A polymorphic list is a data abstraction similar to LinkedLists where objects of two classes, ",(0,i.kt)("inlineCode",{parentName:"p"},"NonEmptyList"),", and ",(0,i.kt)("inlineCode",{parentName:"p"},"EmptyList"),", are employed to cleanly handle edge cases where a LinkedList would be ",(0,i.kt)("inlineCode",{parentName:"p"},"null"),". In a LinkedList, the last node's ",(0,i.kt)("inlineCode",{parentName:"p"},"next")," reference is ",(0,i.kt)("inlineCode",{parentName:"p"},"null"),"; however, for a PolymorphicList, the last node's ",(0,i.kt)("inlineCode",{parentName:"p"},"next")," reference is an ",(0,i.kt)("inlineCode",{parentName:"p"},"EmptyList"),", allowing the EmptyList object to override methods defined in a PolymorphicList."),(0,i.kt)("p",null,"This means that every method is overridden to have a version for a NonEmptyList and for an EmptyList."))}u.isMDXComponent=!0}}]);