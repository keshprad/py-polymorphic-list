"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[671],{3905:function(e,t,r){r.d(t,{Zo:function(){return c},kt:function(){return y}});var n=r(7294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function a(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function p(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var l=n.createContext({}),s=function(e){var t=n.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):a(a({},t),e)),r},c=function(e){var t=s(e.components);return n.createElement(l.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,i=e.originalType,l=e.parentName,c=p(e,["components","mdxType","originalType","parentName"]),u=s(r),y=o,d=u["".concat(l,".").concat(y)]||u[y]||m[y]||i;return r?n.createElement(d,a(a({ref:t},c),{},{components:r})):n.createElement(d,a({ref:t},c))}));function y(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=r.length,a=new Array(i);a[0]=u;var p={};for(var l in t)hasOwnProperty.call(t,l)&&(p[l]=t[l]);p.originalType=e,p.mdxType="string"==typeof e?e:o,a[1]=p;for(var s=2;s<i;s++)a[s]=r[s];return n.createElement.apply(null,a)}return n.createElement.apply(null,r)}u.displayName="MDXCreateElement"},9881:function(e,t,r){r.r(t),r.d(t,{frontMatter:function(){return p},contentTitle:function(){return l},metadata:function(){return s},toc:function(){return c},default:function(){return u}});var n=r(7462),o=r(3366),i=(r(7294),r(3905)),a=["components"],p={sidebar_position:1,title:"Intro"},l="py_polymorphic_list",s={unversionedId:"intro",id:"intro",isDocsHomePage:!1,title:"Intro",description:"Publish to PyPIDeploy docs to GitHub Pages",source:"@site/docs/intro.md",sourceDirName:".",slug:"/intro",permalink:"/py_polymorphic_list/docs/intro",editUrl:"https://github.com/keshprad/py_polymorphic_list/edit/main/docs/docs/intro.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1,title:"Intro"},sidebar:"tutorialSidebar",next:{title:"Create a Page",permalink:"/py_polymorphic_list/docs/tutorial-basics/create-a-page"}},c=[{value:"What is a Polymorphic List?",id:"what-is-a-polymorphic-list",children:[],level:2}],m={toc:c};function u(e){var t=e.components,r=(0,o.Z)(e,a);return(0,i.kt)("wrapper",(0,n.Z)({},m,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"py_polymorphic_list"},"py_polymorphic_list"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://github.com/keshprad/py_polymorphic_list/actions/workflows/publish.yml"},(0,i.kt)("img",{parentName:"a",src:"https://github.com/keshprad/py_polymorphic_list/actions/workflows/publish.yml/badge.svg",alt:"Publish to PyPI"})),(0,i.kt)("a",{parentName:"p",href:"https://github.com/keshprad/py_polymorphic_list/actions/workflows/docs.yml"},(0,i.kt)("img",{parentName:"a",src:"https://github.com/keshprad/py_polymorphic_list/actions/workflows/docs.yml/badge.svg",alt:"Deploy docs to GitHub Pages"}))),(0,i.kt)("p",null,"Python implementation of a polymorphic list"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://pypi.org/project/py-polymorphic-list/"},"View on PyPI")," / ",(0,i.kt)("a",{parentName:"p",href:"https://keshprad.github.io/py_polymorphic_list/"},"Documentation")," / ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/keshprad/py_polymorphic_list/"},"GitHub Source Code")),(0,i.kt)("h2",{id:"what-is-a-polymorphic-list"},"What is a Polymorphic List?"),(0,i.kt)("p",null,"A polymorphic list is a data abstraction similar to LinkedLists where objects of two classes, ",(0,i.kt)("inlineCode",{parentName:"p"},"NonEmptyList"),", and ",(0,i.kt)("inlineCode",{parentName:"p"},"EmptyList"),", are employed to cleanly handle edge cases where a LinkedList would be ",(0,i.kt)("inlineCode",{parentName:"p"},"null"),". In a LinkedList, the last node's ",(0,i.kt)("inlineCode",{parentName:"p"},"next")," reference is ",(0,i.kt)("inlineCode",{parentName:"p"},"null"),"; however, for a PolymorphicList, the last node's ",(0,i.kt)("inlineCode",{parentName:"p"},"next")," reference is an ",(0,i.kt)("inlineCode",{parentName:"p"},"EmptyList"),", allowing the EmptyList object to override methods defined in a PolymorphicList."),(0,i.kt)("p",null,"This means that every method is overridden to have a version for a NonEmptyList and for an EmptyList."))}u.isMDXComponent=!0}}]);